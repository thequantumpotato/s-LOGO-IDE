FORWARD\ pixels\ FD\ pixels=moves turtle forward in its current heading by pixels distance \n\
  returns the value of pixels
BACK\ pixels\ BK\ pixels=moves turtle backward in its current heading by pixels distance\n\
  returns the value of pixels
LEFT\ degrees\ LT\ degrees=turns turtle counterclockwise by degrees angle \n\
  returns the value of degrees
RIGHT\ degrees\ RT\ degrees=turns turtle clockwise by degrees angle\n\
  returns the value of degrees
SETHEADING\ degrees\ SETH\ degrees=turns turtle to an absolute heading\n\
  returns number of degrees moved
TOWARDS\ x\ y=turns turtle to face the point (x, y), where (0, 0) is the center of the screen\n\
  returns the number of degrees turtle turned
SETXY\ x\ y\ GOTO\ x\ y=moves turtle to an absolute screen position, where (0, 0) is the center of the screen\n\
  returns the distance turtle moved
PENDOWN\ PD=puts pen down such that when the turtle moves, it leaves a trail\n\
  returns 1
PENUP\ PU=puts pen up such that when the turtle moves, it does not leave a trail\n\
  returns 0
SHOWTURTLE\ ST=makes turtle visible\n\
  returns 1
HIDETURTLE\ HT=makes turtle invisible\n\
  returns 0
HOME=moves turtle to the center of the screen (0 0)\n\
  returns the distance turtle moved
CLEARSCREEN\ CS=erases turtle's trails and sends it to the home position\n\
returns the distance turtle moved
XCOR=returns the turtle's X coordinate from the center of the screen
YCOR=returns the turtle's Y coordinate from the center of the screen
HEADING=returns the turtle's heading in degrees
PENDOWN?\ PENDOWNP=returns 1 if turtle's pen is down, 0 if it is up
SHOWING?\ SHOWINGP=returns 1 if turtle is showing, 0 if it is hiding
SUM\ expr1\ expr2+\ expr1\ expr2=returns sum of the values of expr1 and expr2
DIFFERENCE\ expr1\ expr2\ -\ expr1\ expr2=returns difference of the values of expr1 and expr2
PRODUCT\ expr1\ expr2*\ expr1\ expr2=returns product of the values of expr1 and expr2
QUOTIENT\ expr1\ expr2\ /\ expr1\ expr2=returns quotient of the values of expr1 and expr2
REMAINDER\ expr1\ expr2\ %\ expr1\ expr2=returns remainder on dividing the values of expr1 by expr2
MINUS\ expr\\~\ expr=returns negative of the values of expr
RANDOM\ max=returns random non-negative number strictly less than max
SIN\ degrees=returns sine of degrees
COS\ degrees=return cosine of degrees
TAN\ degrees=returns tangent of degrees
ATAN\ degrees=returns arctangent of degrees
LOG\ expr=returns natural log of expr
POW\ base\ exponent=returns base raised to the power of the exponent
PI=Reports the number Pi
LESS?\ expr1\ expr2\ LESSP\ expr1\ expr2=returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0
GREATER?\ expr1\ expr2\ GREATERP\ expr1\ expr2\=returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0
EQUAL?\ expr1\ expr2\ EQUALP\ expr1\ expr2=returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0
NOTEQUAL?\ expr1\ expr2\ NOTEQUALP\ expr1\ expr2=returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0
AND\ test1\ test2=returns 1 if test1 and test2 are non-zero, otherwise 0
OR\ test1\ test2=returns 1 if test1 or test2 are non-zero, otherwise 0
NOT\ test=returns 1 if test is 0 and 0 if test is non-zero
MAKE\ variable\ expr\ SET\ variable\ expr=assigns the value of expr to variable, creating the variable if necessary\n\
returns expr
REPEAT\ expr\ [\ command(s)\ ]=runs command(s) given in the list the value of expr number of times\n\
returns the value of the final command executed (or 0 if no commands are executed)\n\
note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s)
DOTIMES\ [\ variable\ limit\ ]\ [\ command(s)\ ]=runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive \n\
returns the value of the final command executed (or 0 if no commands are executed)\n\
note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
FOR\ [\ variable\ start\ end\ increment\ ]\ [\ command(s)\ ]=runs command(s) for each value specified in the range, i.e., from (start - end), going by increment\n\
returns the value of the final command executed (or 0 if no commands are executed)\n\
note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
IF\ expr\ [\ command(s)\ ]=if expr is not 0, runs the command(s) given in the list\n\
returns the value of the final command executed (or 0 if no commands are executed)
IFELSE\ expr\ [\ trueCommand(s)\ ]\ [\ falseCommand(s)\ ]=if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list\n\
returns the value of the final command executed (or 0 if no commands are executed)
TO\ commandName\ [\ variable(s)\ ]\ [\ command(s)\ ]=assigns command(s) given in the second list to commandName using parameters given in first list as variables\n\
when commandName is used later in a program, any given values are assigned to variables that can be accessed when the command list is run and the value of the final command executed is returned (or 0 if no commands are executed)\n\
returns 1 if command is successfully defined, otherwise 0
SETBACKGROUND\ index\ SETBG\ index=sets background color of screen to that represented by index\n\
returns given index
SETPENCOLOR\ index\ SETPC\ index=sets color of the pen to that represented by index\n\
  returns given index
SETPENSIZE\ pixels\ SETPS\ pixels=sets size of the pen to be pixels thickness \n\
  returns given pixels
SETSHAPE\ index\ SETSH\ index=sets shape of turtle to that represented by index \n\
  returns given index
SETPALETTE\ index\ r\ g\ b=sets color corresponding at given index to given r g b color values\n\
returns given index\n\
note, color component values are nonnegative integers less than 256 specifying an amount of red, green, and blue
PENCOLOR\ PC=returns turtle's current color index
SHAPE\ SH=returns turtle's current shape index\n\
ID =returns current active turtle's ID number\n\
ID values typically start at 1 and increase by 1 with each new turtle created\n\
note, there is technically only one "active turtle" at any given time since each command is run once for each active turtle, i.e., this value can always be used to identify the current turtle running the command
TURTLES=returns number of turtles created so far
TELL\ [\ turtle(s)\ ]=sets turtles that will follow commands hereafter \n\
returns last value in turtles list\n\
note, if turtle has not previously existed, it is created and placed at the home location\n\
note, if more than one turtle is active, commands run return value associated with the last active turtle
ASK\ [\ turtle(s)\ ]\ [\ command(s)\ ]=only the turtles given in first list all run commands given in the second list\n\
returns result of last command run by the last turtle\n\
note, after commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given)\n\
note, if more than one turtle is active, commands run return value associated with the last active turtle
ASKWITH\ [\ condition\ ]\ [\ command(s)\ ]=tell turtles matching given condition to run commands given in the second list\n\
returns result of last command run\n\
note, after commands are run, currently active list of turtles returns to that set by the last TELL command (or default active turtle if TELL never given)\n\
note, if more than one turtle is active, commands run return value associated with the last active turtle